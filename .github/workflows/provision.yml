name: Provision resources on Scaleway and initialize K8s cluster

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose an action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - plan + apply

jobs:
  provision-infra-resources:
    runs-on: ubuntu-latest
    outputs:
      kubeconfig_content: ${{ steps.kubeconfig.outputs.kubeconfig }}
      db_connection_secret_id: ${{ steps.db.outputs.db_connection_secret_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.0"

      - name: Set environment variables
        run: |
          echo "SCW_ACCESS_KEY=${{ secrets.SCW_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "SCW_SECRET_KEY=${{ secrets.SCW_SECRET_KEY }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.SCW_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.SCW_SECRET_KEY }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: terraform init -upgrade
        working-directory: terraform

      - name: Run terraform plan
        run: terraform plan -var app_name=project-scw-target -out release.tfplan
        working-directory: terraform

      - name: Post build summary
        uses: borchero/terraform-plan-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          planfile: release.tfplan
          working-directory: terraform
      
      - name: Run terraform apply
        if: ${{ github.event.inputs.action == 'plan + apply' }}
        run: terraform apply -auto-approve release.tfplan
        working-directory: terraform

      - name: Download Kubeconfig content and store it as a GitHub Actions output
        id: kubeconfig
        if: ${{ github.event.inputs.action == 'plan + apply' }}
        run: |
          cluster_id=$(terraform output -raw kubernetes_cluster_id)
          echo "kubeconfig=$(curl -X GET -H "Content-Type: application/json" -H "X-Auth-Token: ${{ secrets.SCW_SECRET_KEY }}" https://api.scaleway.com/k8s/v1/regions/fr-par/clusters/${cluster_id}/kubeconfig | jq -r .content)" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Save Scaleway Secret Id for database connection as a GitHub Actions output
        id: db
        if: ${{ github.event.inputs.action == 'plan + apply' }}
        run: echo "db_connection_secret_id=$(terraform output -raw db_connection_secret_id)" >> $GITHUB_OUTPUT
        working-directory: terraform

  initialize-k8s-cluster:
    runs-on: ubuntu-latest
    needs: provision-infra-resources
    if: ${{ github.event.inputs.action == 'plan + apply' }}
    env:
      SCALEWAY_SECRET_NAME: scaleway-credentials
      GHCR_SECRET_NAME: ghcr-login
      DB_SECRET_NAME: db-credentials
      REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubeconfig file
        run: |
          mkdir -p ~/.kube
          decoded_kubeconfig=$(echo "${{ needs.provision-infra-resources.outputs.kubeconfig_content }}" | base64 -d)
          cat <<EOF > ~/.kube/config
          ${decoded_kubeconfig}
          EOF
          chmod 600 ~/.kube/config
      
      - name: Delete previous version of secrets
        run: |
          kubectl delete secret ${{ env.SCALEWAY_SECRET_NAME }} --ignore-not-found=true
          kubectl delete secret ${{ env.GHCR_SECRET_NAME }} --ignore-not-found=true
          kubectl delete secret ${{ env.DB_SECRET_NAME }} --ignore-not-found=true

      - name: Create secret to store Scaleway credentials
        run: kubectl create secret generic ${{ env.SCALEWAY_SECRET_NAME }} --from-literal=SCW_ACCESS_KEY=${{ secrets.SCW_ACCESS_KEY }} --from-literal=SCW_SECRET_KEY=${{ secrets.SCW_SECRET_KEY }}

      - name: Create secret for registry login
        run: kubectl create secret docker-registry ${{ env.GHCR_SECRET_NAME }} --docker-server=${{ env.REGISTRY }} --docker-username=${{ github.actor }} --docker-password=${{ secrets.PAT_TOKEN }} --docker-email=${{ github.actor }}@users.noreply.github.com

      - name: Retrieve the database credentials from Scaleway Secret Manager
        id: db_credentials
        run: |
          DB_SECRET_INFO=$(curl -X GET -H "X-Auth-Token: ${{ secrets.SCW_SECRET_KEY }}" "https://api.scaleway.com/secret-manager/v1alpha1/regions/fr-par/secrets/${{ needs.provision-infra-resources.outputs.db_connection_secret_id }}/versions/latest/access" | jq -r .data | base64 -d)
          echo "::add-mask::$DB_SECRET_INFO"
          echo "db_secret_info=$DB_SECRET_INFO" >> $GITHUB_OUTPUT

      - name: Create secret for database
        env:
          DB_CONNECTION_DATA: ${{ steps.db_credentials.outputs.db_secret_info }}
        run: |
          DB_NAME=$(echo "$DB_CONNECTION_DATA" | jq -r '.dbname')
          DB_PORT=$(echo "$DB_CONNECTION_DATA" | jq -r '.port')
          DB_HOST=$(echo "$DB_CONNECTION_DATA" | jq -r '.host')
          DB_PASSWORD=$(echo "$DB_CONNECTION_DATA" | jq -r '.password')
          DB_USERNAME=$(echo "$DB_CONNECTION_DATA" | jq -r '.username')
          kubectl create secret generic ${{ env.DB_SECRET_NAME }} \
            --from-literal=DB_HOST="$DB_HOST" \
            --from-literal=DB_PORT="$DB_PORT" \
            --from-literal=DB_NAME="$DB_NAME" \
            --from-literal=DB_USER="$DB_USERNAME" \
            --from-literal=DB_PASSWORD="$DB_PASSWORD"

      - name: Apply the ConfigMap that contains the database schema
        run: kubectl create configmap db-schema --from-file=app/schema.sql -o yaml --dry-run=client | kubectl apply -f -

      - name: Apply the Job that initializes the database schema
        run: kubectl apply -f k8s/init-schema-job.yaml

      - name: Apply the manifests related to Grafana
        run: |
          kubectl apply -f k8s/grafana/grafana-configmap.yaml
          kubectl apply -f k8s/grafana/grafana-deployment.yaml
          kubectl apply -f k8s/grafana/grafana-service.yaml

      # The kubeconfig file is needed in the Deployment provisioning workflow
      - name: Save the Kubeconfig file content as a repository Secret
        uses: gliech/create-github-secret-action@v1
        with:
          name: KUBECONFIG
          value: ${{ needs.provision-infra-resources.outputs.kubeconfig_content }}
          pa_token: ${{ secrets.PAT_TOKEN }}